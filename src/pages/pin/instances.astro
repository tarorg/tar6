---
import Menu from '../../components/Menu.astro';
import { createClient } from '@libsql/client';

// Initialize Turso client
const client = createClient({
  url: import.meta.env.TURSO_DATABASE_URL,
  authToken: import.meta.env.TURSO_AUTH_TOKEN,
});

// Define the Instance type
interface Instance {
  sku: string;
  qty: number;
}

// Fetch all instances from Turso
let instances: Instance[] = [];
try {
  const result = await client.execute('SELECT sku, qty FROM Instances');
  instances = result.rows as unknown as Instance[];
} catch (error) {
  console.error('Error fetching instances:', error);
}
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pin - Instances</title>
</head>
<body>
    <Menu />
    <main>
        <div class="search-container">
            <input type="text" id="searchBar" class="search-bar" placeholder="Search...">
        </div>

        <!-- Notion-like table -->
        <div class="table-container">
            <table class="instances-table">
                <thead>
                    <tr>
                        <th class="border-r">SKU</th>
                        <th>QTY</th>
                    </tr>
                </thead>
                <tbody id="instancesTableBody">
                    {instances.map((instance: Instance) => (
                        <tr>
                            <td class="border-r">{instance.sku}</td>
                            <td class="qty-cell" data-sku={instance.sku}>{instance.qty}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    </main>
    
    <!-- Floating Action Button -->
    <button id="fabButton" class="fab" aria-label="Add">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
    </button>

    <!-- Modern Bottom Sheet -->
    <div id="bottomSheet" class="bottom-sheet">
        <div class="bottom-sheet-content">
            <div class="bottom-sheet-header">
                <h2><span id="selectedSku"></span></h2>
                <button id="closeSheet" class="close-button">&times;</button>
            </div>
            <div class="bottom-sheet-body">
                <input type="number" id="qtyInput" min="0" step="1" class="qty-input">
                <button id="updateQty" class="update-button">Update</button>
            </div>
        </div>
    </div>
</body>
</html>

<style>
    body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
        color: #37352f;
    }
    main {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }
    .search-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
        width: 100%;
    }
    .search-bar {
        width: 100%;
        padding: 10px 15px;
        font-size: 16px;
        border: 1px solid #e0e0e0;
        border-radius: 3px;
        outline: none;
    }
    .fab {
        position: fixed;
        bottom: 30px;
        right: 30px;
        width: 56px;
        height: 56px;
        border-radius: 50%;
        background-color: #007bff;
        color: white;
        border: none;
        font-size: 24px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        transition: background-color 0.3s, transform 0.3s;
    }
    .fab:hover {
        background-color: #0056b3;
    }
    .fab:active {
        transform: scale(0.95);
    }
    .table-container {
        overflow-x: auto;
        border-left: 1px solid #e0e0e0;
        border-right: 1px solid #e0e0e0;
    }
    .instances-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        font-size: 14px;
    }
    .instances-table th,
    .instances-table td {
        padding: 8px 16px;
        text-align: left;
        border-bottom: 1px solid #e0e0e0;
    }
    .instances-table th {
        font-weight: 600;
        color: #6b7280;
        background-color: #fafafa;
        border-top: 1px solid #e0e0e0;
    }
    .instances-table tr:hover {
        background-color: #f9f9f9;
    }
    .instances-table .border-r {
        border-right: 1px solid #e0e0e0;
    }
    .qty-cell {
        cursor: pointer;
    }

    .bottom-sheet {
        position: fixed;
        bottom: -100%;
        left: 0;
        width: 100%;
        background-color: white;
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
        transition: bottom 0.3s ease-out;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1001;
    }

    .bottom-sheet-content {
        padding: 20px;
    }

    .bottom-sheet-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .bottom-sheet-header h2 {
        margin: 0;
        font-size: 1.2rem;
        font-weight: normal;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #6b7280;
    }

    .bottom-sheet-body {
        display: flex;
        flex-direction: column;
    }

    .qty-input {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        font-size: 1rem;
    }

    .update-button {
        padding: 10px 20px;
        background-color: white;
        color: #333;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s, border-color 0.3s;
        margin-bottom: 20px; /* Add bottom spacing */
    }

    .update-button:hover {
        background-color: #f5f5f5;
        border-color: #d0d0d0;
    }
</style>

<script>
    import { createClient } from '@libsql/client';

    const fabButton = document.getElementById('fabButton');
    const searchBar = document.getElementById('searchBar') as HTMLInputElement;
    const instancesTableBody = document.getElementById('instancesTableBody');
    const bottomSheet = document.getElementById('bottomSheet') as HTMLElement;
    const selectedSku = document.getElementById('selectedSku');
    const qtyInput = document.getElementById('qtyInput') as HTMLInputElement;
    const updateQtyBtn = document.getElementById('updateQty');
    const closeSheetBtn = document.getElementById('closeSheet');

    // Initialize Turso client on the client-side
    const client = createClient({
        url: (window as any).TURSO_DATABASE_URL || '',
        authToken: (window as any).TURSO_AUTH_TOKEN || '',
    });

    if (fabButton) {
        fabButton.addEventListener('click', () => {
            window.location.href = '/pin/prod';
        });
    }

    if (searchBar) {
        searchBar.addEventListener('input', debounce(performSearch, 300));
    }

    // Add event listeners for qty cells
    const qtyCells = document.querySelectorAll('.qty-cell');
    qtyCells.forEach(cell => {
        cell.addEventListener('click', () => openBottomSheet(cell as HTMLElement));
    });

    function openBottomSheet(cell: HTMLElement) {
        const sku = cell.dataset.sku;
        const currentQty = cell.textContent;
        if (selectedSku && qtyInput) {
            selectedSku.textContent = sku || '';
            qtyInput.value = currentQty || '';
        }
        if (bottomSheet) {
            bottomSheet.style.bottom = '0';
        }
    }

    if (closeSheetBtn) {
        closeSheetBtn.addEventListener('click', () => {
            if (bottomSheet) {
                bottomSheet.style.bottom = '-100%';
            }
        });
    }

    if (updateQtyBtn) {
        updateQtyBtn.addEventListener('click', async () => {
            if (!selectedSku || !qtyInput) return;
            
            const sku = selectedSku.textContent;
            const newQty = qtyInput.value;
            
            try {
                // Update the database
                await client.execute({
                    sql: 'UPDATE Instances SET qty = ? WHERE sku = ?',
                    args: [newQty, sku]
                });

                // Update the UI
                const cell = document.querySelector(`.qty-cell[data-sku="${sku}"]`);
                if (cell) {
                    cell.textContent = newQty;
                }

                // Close the bottom sheet
                if (bottomSheet) {
                    bottomSheet.style.bottom = '-100%';
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                alert('Failed to update quantity. Please try again.');
            }
        });
    }

    function performSearch() {
        if (!searchBar || !instancesTableBody) return;
        
        const searchTerm = searchBar.value.trim().toLowerCase();
        const rows = instancesTableBody.querySelectorAll('tr');

        rows.forEach(row => {
            const sku = row.querySelector('td:first-child')?.textContent?.toLowerCase() || '';
            const qty = row.querySelector('td:last-child')?.textContent?.toLowerCase() || '';
            
            if (sku.includes(searchTerm) || qty.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    function debounce(func: Function, delay: number) {
        let timeoutId: ReturnType<typeof setTimeout>;
        return function (this: any, ...args: any[]) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }
</script>

<script is:inline define:vars={{ TURSO_DATABASE_URL: import.meta.env.TURSO_DATABASE_URL, TURSO_AUTH_TOKEN: import.meta.env.TURSO_AUTH_TOKEN }}>
  window.TURSO_DATABASE_URL = TURSO_DATABASE_URL;
  window.TURSO_AUTH_TOKEN = TURSO_AUTH_TOKEN;
</script>
