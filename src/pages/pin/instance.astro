---
import categories from '../../data/cat.json';
import attributes from '../../data/at.json';
import '../../styles/global.css';
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Core Database</title>
</head>
<body class="text-gray-900 font-sans">
    <div class="max-w-4xl mx-auto p-4">
        <!-- Add the new cancel and OK icons here -->
        <div class="flex justify-end space-x-2 mb-4">
            <button id="cancelButton" class="p-2 bg-gray-100 rounded-sm hover:bg-gray-200 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <button id="okButton" class="p-2 bg-gray-100 rounded-sm hover:bg-gray-200 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
            </button>
        </div>

        <div id="corebox" class="bg-white rounded-lg shadow-sm overflow-hidden">
            <table id="coreTable" class="w-full">
                <tbody>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Name</td>
                        <td class="py-2 px-4" contenteditable="true" data-max-length="50" id="nameField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">SKU</td>
                        <td class="py-2 px-4" contenteditable="true" id="skuField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">UPC</td>
                        <td class="py-2 px-4" contenteditable="true" id="upcField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Collection</td>
                        <td class="py-2 px-4 category-wrapper">
                            <input type="text" class="w-full focus:outline-none bg-transparent" placeholder="Select a collection">
                            <div class="category-dropdown hidden absolute bg-white shadow-md rounded-md mt-1 max-h-48 overflow-y-auto">
                                {categories.categories.map((category) => (
                                    <div class="py-2 px-4 hover:bg-gray-100 cursor-pointer" data-value={category}>{category}</div>
                                ))}
                            </div>
                        </td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200 media-cell cursor-pointer transition-colors duration-200">
                            <input type="file" id="mediaInput" multiple accept="image/*,.pdf,.doc,.docx,.xls,.xlsx" class="hidden">
                            Medias
                        </td>
                        <td class="py-2 px-4">
                            <div class="media-preview flex flex-wrap gap-2"></div>
                        </td>
                    </tr>
                    {[...Array(5)].map((_, index) => (
                        <tr class="border-b border-gray-200 option-row">
                            <td class="py-2 px-4 font-medium border-r border-gray-200">
                                <input type="text" class="w-full focus:outline-none bg-transparent type-input" placeholder="Type">
                            </td>
                            <td class="py-2 px-4">
                                <input type="text" class="w-full focus:outline-none bg-transparent type-value-input">
                            </td>
                        </tr>
                    ))}
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Stock</td>
                        <td class="py-2 px-4" contenteditable="true" id="stockField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">ROL</td>
                        <td class="py-2 px-4" contenteditable="true" id="rolField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Cost P</td>
                        <td class="py-2 px-4" contenteditable="true" id="costPriceField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Sell P</td>
                        <td class="py-2 px-4" contenteditable="true" id="sellPriceField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">MRP</td>
                        <td class="py-2 px-4" contenteditable="true" id="mrpField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Loc.</td>
                        <td class="py-2 px-4" contenteditable="true" id="locationField"></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div id="notesContainer" class="bg-white rounded-lg shadow-sm overflow-hidden p-4 hidden">
            <div id="editorjs"></div>
        </div>
    </div>

    <!-- Bottom Sheet -->
    <div id="bottomSheet" class="fixed inset-x-0 bottom-0 bg-white shadow-md rounded-t-xl transform translate-y-full transition-transform duration-300 ease-in-out z-50">
        <div class="p-4">
            <div class="flex items-center justify-between mb-4">
                <input type="text" id="bottomSheetSearch" class="w-full mr-4 p-2 border rounded-md" placeholder="Search values...">
                <button id="closeBottomSheet" class="text-gray-500 hover:text-gray-700 focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div id="bottomSheetContent" class="max-h-64 overflow-y-auto">
                <!-- Values will be populated here -->
            </div>
        </div>
    </div>

    <!-- Add this HTML for the confirmation dialog just before the closing </body> tag -->
    <div id="confirmationDialog" class="fixed inset-x-0 bottom-0 bg-white shadow-md rounded-t-xl transform translate-y-full transition-transform duration-300 ease-in-out z-50">
        <div class="p-4">
            <p class="text-lg font-semibold mb-4">Are you sure you want to decrease the number of options?</p>
            <div class="flex justify-end space-x-4">
                <button id="cancelDecrease" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                <button id="confirmDecrease" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Add Editor.js and its plugins -->
    <script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@editorjs/header@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@editorjs/list@latest"></script>

    <!-- Update this HTML for the media bottom sheet just before the closing </body> tag -->
    <div id="mediaBottomSheet" class="fixed inset-x-0 bottom-0 bg-white shadow-md rounded-t-xl transform translate-y-full transition-transform duration-300 ease-in-out z-50">
        <div class="p-6">
            <div class="flex items-center justify-end mb-6">
                <button id="closeMediaBottomSheet" class="text-gray-400 hover:text-gray-500 focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div id="mediaBottomSheetContent" class="space-y-6">
                <!-- Media items will be populated here -->
            </div>
        </div>
    </div>

    <!-- Update the SVG definition -->
    <svg id="loadingIconSvg" class="hidden" viewBox="0 0 32 32" width="32" height="32">
        <circle cx="16" cy="16" r="14" fill="none" stroke="#E5E7EB" stroke-width="4" />
        <path id="loadingArc" d="M16 2 A14 14 0 0 1 30 16" fill="none" stroke="#9CA3AF" stroke-width="4" stroke-linecap="round" />
    </svg>

    <script define:vars={{ attributes }}>
        function setupDropdown(inputSelector, dropdownSelector, optionsSelector) {
            const input = document.querySelector(inputSelector);
            const dropdown = document.querySelector(dropdownSelector);
            const options = dropdown.querySelectorAll(optionsSelector);
            const wrapper = input.closest('.category-wrapper');

            input.addEventListener('focus', () => {
                dropdown.classList.remove('hidden');
                dropdown.style.width = `${wrapper.offsetWidth}px`;
                
                // Position the dropdown
                const rect = wrapper.getBoundingClientRect();
                dropdown.style.top = `${rect.bottom}px`;
                dropdown.style.left = `${rect.left}px`;
            });

            input.addEventListener('blur', () => {
                setTimeout(() => {
                    dropdown.classList.add('hidden');
                }, 200);
            });

            input.addEventListener('input', () => {
                const filter = input.value.toLowerCase();
                options.forEach((option) => {
                    const text = option.textContent.toLowerCase();
                    if (text.includes(filter)) {
                        option.style.display = 'block';
                    } else {
                        option.style.display = 'none';
                    }
                });
            });

            options.forEach((option) => {
                option.addEventListener('click', () => {
                    input.value = option.textContent;
                    dropdown.classList.add('hidden');
                });
            });
        }

        // Setup Collection dropdown
        setupDropdown('.category-wrapper input', '.category-dropdown', '.category-dropdown div');

        const coreTable = document.getElementById('coreTable');

        // Name field character limit and page title update
        const nameCell = document.querySelector('[data-max-length]');
        const pageTitle = document.getElementById('pageTitle');
        if (nameCell) {
            nameCell.addEventListener('input', function() {
                const maxLength = parseInt(this.getAttribute('data-max-length') || '50');
                if (this.textContent && this.textContent.length > maxLength) {
                    this.textContent = this.textContent.slice(0, maxLength);
                }
                updatePageTitle(this.textContent);
            });
        }

        function updatePageTitle(name) {
            pageTitle.textContent = name || 'Product name';
        }

        // Logging changes for other fields
        document.querySelectorAll('td[contenteditable="true"]').forEach(cell => {
            cell.addEventListener('blur', function() {
                const previousSibling = this.previousElementSibling;
                if (previousSibling && previousSibling.textContent && this.textContent) {
                    console.log(`${previousSibling.textContent} updated to: ${this.textContent}`);
                }
                // Here you can add code to save the changes, e.g., send to a server
            });
        });

        // Media upload functionality
        const mediaCell = document.querySelector('.media-cell');
        const mediaInput = document.getElementById('mediaInput');
        const mediaPreview = document.querySelector('.media-preview');

        mediaCell.addEventListener('click', () => {
            mediaInput.click();
        });

        mediaCell.addEventListener('dragover', (e) => {
            e.preventDefault();
            mediaCell.classList.add('bg-gray-200');
        });

        mediaCell.addEventListener('dragleave', () => {
            mediaCell.classList.remove('bg-gray-200');
        });

        mediaCell.addEventListener('drop', (e) => {
            e.preventDefault();
            mediaCell.classList.remove('bg-gray-200');
            const files = e.dataTransfer.files;
            handleFiles(files);
        });

        mediaInput.addEventListener('change', (event) => {
            const files = event.target.files;
            handleFiles(files);
        });

        const mediaBottomSheet = document.getElementById('mediaBottomSheet');
        const mediaBottomSheetContent = document.getElementById('mediaBottomSheetContent');
        const closeMediaBottomSheetButton = document.getElementById('closeMediaBottomSheet');

        function openMediaBottomSheet() {
            mediaBottomSheet.classList.remove('translate-y-full');
        }

        function closeMediaBottomSheet() {
            mediaBottomSheet.classList.add('translate-y-full');
        }

        closeMediaBottomSheetButton.addEventListener('click', closeMediaBottomSheet);

        // Update the createMediaBottomSheetItem function

        function createMediaBottomSheetItem(file, publicUrl) {
            const mediaItem = document.createElement('div');
            mediaItem.className = 'bg-white p-4 rounded-lg shadow-md';

            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = URL.createObjectURL(file);
                img.className = 'w-full object-cover rounded-lg mb-4';
                img.style.maxHeight = '300px';
                mediaItem.appendChild(img);
            } else if (file.type.startsWith('video/')) {
                const videoContainer = document.createElement('div');
                videoContainer.className = 'relative w-full rounded-lg mb-4';
                videoContainer.style.paddingBottom = '56.25%'; // 16:9 aspect ratio

                const video = document.createElement('video');
                video.src = URL.createObjectURL(file);
                video.className = 'absolute top-0 left-0 w-full h-full rounded-lg';
                video.controls = true;

                videoContainer.appendChild(video);
                mediaItem.appendChild(videoContainer);
            } else {
                const icon = document.createElement('div');
                icon.className = 'w-full h-32 flex items-center justify-center bg-gray-200 rounded-lg mb-4';
                icon.textContent = getFileIcon(file.type);
                mediaItem.appendChild(icon);
            }

            const fileName = document.createElement('p');
            fileName.className = 'text-sm font-medium mb-4';
            fileName.textContent = file.name;
            mediaItem.appendChild(fileName);

            const removeButton = document.createElement('button');
            removeButton.className = 'w-full px-4 py-2 bg-white text-gray-700 border border-gray-300 rounded-md text-sm font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500';
            removeButton.textContent = 'Remove';
            removeButton.addEventListener('click', async () => {
                try {
                    const fileName = publicUrl.split('/').pop();
                    const response = await fetch('/api/deleteFile', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ fileName }),
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Failed to delete file from R2');
                    }

                    // Remove the file from the preview
                    const previewItem = document.querySelector(`.media-item[data-public-url="${publicUrl}"]`);
                    if (previewItem) {
                        previewItem.remove();
                    }
                    // Remove the item from the bottom sheet
                    mediaItem.remove();
                    // Close the bottom sheet if no items left
                    if (mediaBottomSheetContent.children.length === 0) {
                        closeMediaBottomSheet();
                    }
                } catch (error) {
                    console.error('Error removing file:', error);
                    alert('Failed to remove file. Please try again.');
                }
            });
            mediaItem.appendChild(removeButton);

            return mediaItem;
        }

        // Update the createUploadingIcon function
        function createUploadingIcon() {
            const uploadingIcon = document.createElement('div');
            uploadingIcon.className = 'media-item inline-flex items-center justify-center overflow-hidden bg-transparent';
            uploadingIcon.style.width = '32px';
            uploadingIcon.style.height = '32px';
            
            const svg = document.getElementById('loadingIconSvg').cloneNode(true);
            svg.classList.remove('hidden');
            svg.classList.add('rotating-circle');
            uploadingIcon.appendChild(svg);
            
            return uploadingIcon;
        }

        // Update the handleFiles function
        async function handleFiles(files) {
            if (files) {
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    console.log('Processing file:', file.name, 'Type:', file.type);

                    // Create and append the uploading icon
                    const uploadingIcon = createUploadingIcon();
                    mediaPreview.appendChild(uploadingIcon);

                    try {
                        // Upload file
                        const url = `/api/getSignedUrl?fileName=${encodeURIComponent(file.name)}&fileType=${encodeURIComponent(file.type)}`;
                        console.log('Requesting signed URL:', url);
                        
                        const response = await fetch(url);
                        console.log('Signed URL response status:', response.status);
                        
                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`Failed to get signed URL: ${errorText}`);
                        }

                        const { signedUrl } = await response.json();
                        console.log('Received signed URL:', signedUrl);

                        // Upload directly to R2
                        const uploadResponse = await fetch(signedUrl, {
                            method: 'PUT',
                            body: file,
                            headers: {
                                'Content-Type': file.type
                            }
                        });

                        if (!uploadResponse.ok) {
                            throw new Error(`Upload failed: ${await uploadResponse.text()}`);
                        }

                        console.log('File uploaded successfully');

                        // Extract the file name from the signed URL
                        const fileName = signedUrl.split('/').pop().split('?')[0];
                        
                        // Construct the correct public URL
                        const publicUrl = `https://files2.parai.space/${fileName}`;
                        console.log('Public URL:', publicUrl);

                        // Create thumbnail preview
                        const mediaItem = createMediaItem(file, publicUrl);
                        mediaPreview.replaceChild(mediaItem, uploadingIcon);

                    } catch (error) {
                        console.error('Error processing file:', file.name, error);
                        const errorItem = document.createElement('div');
                        errorItem.className = 'media-item bg-red-100';
                        const errorIcon = document.createElement('span');
                        errorIcon.textContent = '❌';
                        errorItem.appendChild(errorIcon);
                        
                        // Replace the uploading icon with the error icon
                        mediaPreview.replaceChild(errorItem, uploadingIcon);
                    }
                }

                console.log(`Medias updated: ${files.length} file(s) processed`);
            }
        }

        function createMediaItem(file, publicUrl) {
            const mediaItem = document.createElement('div');
            mediaItem.className = 'media-item inline-flex items-center justify-center overflow-hidden';
            mediaItem.style.width = '32px';
            mediaItem.style.height = '32px';
            mediaItem.setAttribute('data-public-url', publicUrl);

            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = URL.createObjectURL(file);
                img.alt = file.name;
                img.className = 'w-full h-full object-cover';
                mediaItem.appendChild(img);
            } else if (file.type.startsWith('video/')) {
                const videoIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                videoIcon.setAttribute('viewBox', '0 0 24 24');
                videoIcon.setAttribute('fill', 'none');
                videoIcon.setAttribute('stroke', 'currentColor');
                videoIcon.setAttribute('stroke-width', '2');
                videoIcon.setAttribute('stroke-linecap', 'round');
                videoIcon.setAttribute('stroke-linejoin', 'round');
                videoIcon.classList.add('w-6', 'h-6', 'text-gray-600');

                const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                circle.setAttribute('cx', '12');
                circle.setAttribute('cy', '12');
                circle.setAttribute('r', '10');
                videoIcon.appendChild(circle);

                const playTriangle = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                playTriangle.setAttribute('d', 'M10 8l6 4-6 4V8z');
                videoIcon.appendChild(playTriangle);

                mediaItem.appendChild(videoIcon);
            } else {
                const icon = document.createElement('span');
                icon.textContent = getFileIcon(file.type);
                icon.className = 'text-xl';
                mediaItem.appendChild(icon);
            }

            mediaItem.addEventListener('click', () => {
                mediaBottomSheetContent.innerHTML = ''; // Clear previous content
                const bottomSheetItem = createMediaBottomSheetItem(file, publicUrl);
                mediaBottomSheetContent.appendChild(bottomSheetItem);
                openMediaBottomSheet();
            });

            return mediaItem;
        }

        // Update the getFileIcon function

        function getFileIcon(fileType) {
            if (fileType.includes('pdf')) return '📄';
            if (fileType.includes('doc')) return '📝';
            if (fileType.includes('xls')) return '📊';
            if (fileType.startsWith('video/')) return '🎥';
            return '📁'; // default icon for other file types
        }

        // Add these new event listeners at the end of the script
        const notesIcon = document.getElementById('notesIcon');
        const corebox = document.getElementById('corebox');
        const notesContainer = document.getElementById('notesContainer');

        notesIcon.addEventListener('click', () => {
            notesContainer.classList.toggle('hidden');
            corebox.classList.toggle('hidden');
            if (!notesContainer.classList.contains('hidden')) {
                initializeEditor();
            }
        });

        // Add these new variables and functions for Editor.js
        let editor;

        function initializeEditor() {
            if (editor) {
                editor.destroy();
            }

            editor = new EditorJS({
                holder: 'editorjs',
                tools: {
                    header: {
                        class: Header,
                        inlineToolbar: ['link']
                    },
                    list: {
                        class: List,
                        inlineToolbar: true
                    }
                },
                data: {}, // You can load saved data here
                placeholder: 'Enter your notes here...'
            });
        }

        // Add a function to save the editor content
        async function saveEditorContent() {
            if (editor) {
                try {
                    const savedData = await editor.save();
                    console.log('Notes saved:', savedData);
                    // Here you can add code to send the saved data to your server
                } catch (error) {
                    console.error('Saving failed: ', error);
                }
            }
        }

        // You might want to call saveEditorContent() periodically or when the user navigates away from the page
        window.addEventListener('beforeunload', saveEditorContent);

        // Add new script for the cancel and OK buttons
        document.addEventListener('DOMContentLoaded', () => {
            const cancelButton = document.getElementById('cancelButton');
            const okButton = document.getElementById('okButton');

            cancelButton.addEventListener('click', () => {
                console.log('Cancel button clicked');
                // Add your cancel logic here
            });

            okButton.addEventListener('click', () => {
                console.log('OK button clicked');
                // Add your OK logic here
            });
        });
    </script>

    <style>
        .media-cell {
            min-height: 40px; /* Adjust as needed */
        }
        .media-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }
        .media-item {
            width: 32px;
            height: 32px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background-color: #f3f4f6; /* Light gray background for non-image files */
        }
        .media-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        /* Remove the default focus outline for all cells */
        td:focus {
            outline: none;
        }
        /* Add a subtle background color change on hover for all rows */
        tr:hover td {
            background-color: #f9fafb;
        }
        .type-select {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-image: none;
        }

        .type-select::-ms-expand {
            display: none;
        }

        /* Hide the arrow in WebKit browsers */
        .type-select::-webkit-select-placeholder {
            color: transparent;
        }

        /* Hide the arrow in Firefox */
        .type-select:-moz-focusring {
            color: transparent;
            text-shadow: 0 0 0 #000;
        }

        /* Style for the placeholder option */
        .type-select option[value=""] {
            color: #9CA3AF;
        }

        /* Style for other options */
        .type-select option:not([value=""]) {
            color: #374151;
        }

        /* Add these new styles */
        .category-wrapper,
        .type-wrapper {
            position: relative;
        }

        .category-dropdown,
        .type-dropdown {
            position: fixed;
            width: 100%;
            left: 0;
            z-index: 1000;
        }

        /* Bottom Sheet Styles */
        #bottomSheet {
            max-height: 80vh;
        }

        .bottom-sheet-item {
            transition: background-color 0.2s;
        }

        .bottom-sheet-item:active {
            background-color: #e5e7eb;
        }

        .bottom-sheet-item.selected {
            background-color: #93c5fd;
        }

        #typeSelector {
            transition: none; /* Remove the transition */
        }

        #typeSelectorCell:hover #typeSelector {
            color: inherit; /* Use the default text color on hover */
        }

        #optionsSelector {
            transition: none;
        }

        #optionsSelectorCell:hover #optionsSelector {
            color: inherit;
        }

        #closeBottomSheet {
            transition: color 0.2s;
        }

        #closeBottomSheet:hover {
            color: #4B5563; /* A slightly darker gray on hover */
        }

        #bottomSheetSearch {
            flex-grow: 1;
            min-width: 0; /* This allows the input to shrink if needed */
        }

        #closeBottomSheet {
            flex-shrink: 0;
        }

        #optionsSelectorCell {
            user-select: none; /* Prevent text selection */
        }

        #optionsDecrease, #optionsIncrease {
            cursor: pointer;
        }

        #optionsSelector {
            pointer-events: none; /* Allows clicks to pass through to the underlying divs */
        }

        /* Hide table header */
        #coreTable thead {
            display: none;
        }

        /* Style for the page title */
        #pageTitle {
            transition: opacity 0.3s ease;
        }

        #confirmationDialog {
            max-height: 80vh;
        }

        /* Add this new style for the property column */
        #coreTable td:first-child {
            width: 25%;
        }

        /* Add styles for the icons */
        .bg-gray-100 svg {
            transition: color 0.2s ease-in-out;
        }

        /* Add these new styles */
        #editIcon, #notesIcon {
            transition: color 0.2s ease-in-out;
        }

        #corebox, #notesContainer {
            transition: opacity 0.3s ease-in-out;
        }

        /* Add or modify these styles */
        #notesContainer {
            height: calc(100vh - 120px); /* Adjust this value as needed */
        }

        #notesTextarea {
            border: none;
            background-color: transparent;
        }

        /* Add these new styles for Editor.js */
        #editorjs {
            height: 100%;
        }

        .codex-editor__redactor {
            padding-bottom: 100px !important;
        }

        /* Add these new styles for the corebox */
        #corebox {
            width: 100%;
            margin-left: 0;
            margin-right: 0;
            background-color: white;
        }

        #coreTable {
            width: 100%;
        }

        #coreTable td {
            padding-left: 1rem;
            padding-right: 1rem;
        }

        body {
            background-color: white;
        }

        #corebox, #notesContainer {
            width: 100%;
            background-color: white;
            margin-top: 1rem;
        }

        #coreTable {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        #coreTable td {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid #e5e7eb;
        }

        #coreTable tr:last-child td {
            border-bottom: none;
        }

        .media-item {
            width: 32px;
            height: 32px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background-color: #f3f4f6;
            margin: 2px;
            border-radius: 4px;
        }

        .media-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .media-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 2px;
            max-height: 40px; /* Reduced height */
            overflow-y: auto;
        }

        .media-cell {
            height: 44px; /* Slightly larger than max-height of media-preview to account for padding */
            padding: 2px;
        }

        .media-item span {
            font-size: 16px; /* Smaller icon size for non-image files */
        }

        /* Add these new styles for the instances table */
        #instancesTableBody td {
            vertical-align: top;
        }

        #instancesTableBody input[type="text"],
        #instancesTableBody input[type="number"] {
            background-color: transparent;
        }

        #instancesTableBody input[type="text"]::placeholder {
            color: #9CA3AF;
        }

        /* Ensure the table respects the column widths */
        #instancesTableBody table {
            table-layout: fixed;
        }

        #instancesTableBody th,
        #instancesTableBody td {
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Add a vertical divider between columns */
        #instancesTableBody th:first-child,
        #instancesTableBody td:first-child {
            border-right: 1px solid #e5e7eb;
        }

        #instanceSearch {
            transition: all 0.3s ease;
        }

        #instanceSearch:focus {
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
        }

        #mediaBottomSheet {
            max-height: 90vh;
            overflow-y: auto;
        }

        #mediaBottomSheetContent {
            max-height: calc(90vh - 8rem);
            overflow-y: auto;
        }

        .media-cell {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .media-cell:hover {
            background-color: #f3f4f6;
        }

        .media-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
            min-height: 40px;
        }

        /* Add these new styles */
        @keyframes rotate {
            100% {
                transform: rotate(360deg);
            }
        }

        @keyframes arcRotate {
            0% {
                stroke-dasharray: 0 87.96;
                stroke-dashoffset: 0;
            }
            50% {
                stroke-dasharray: 54.97 87.96;
                stroke-dashoffset: -21.99;
            }
            100% {
                stroke-dasharray: 87.96 87.96;
                stroke-dashoffset: -87.96;
            }
        }

        .rotating-circle {
            animation: rotate 1.5s linear infinite;
        }

        .rotating-circle #loadingArc {
            animation: arcRotate 1.5s ease-in-out infinite;
        }

        /* Ensure the SVG takes up the full space of its container */
        .rotating-circle svg {
            width: 100%;
            height: 100%;
        }

        /* Add these new styles */
        #cancelButton, #okButton {
            transition: background-color 0.2s ease;
        }

        #cancelButton:hover, #okButton:hover {
            background-color: #e5e7eb;
        }
    </style>
</body>
</html>